#!/bin/bash
#
source /.IPS
if [ -z "$1" ] ; then
    gwsearch="ctrl/cfg/secvpc/"
    echo
    echo "No Gateway to connect specified"
    echo
    echo "listing configured gateways in keystore:"
    etcdctl ls --sort $gwsearch | cut -d '/' -f 5
    echo
    echo "gw-connect <gateway name> <management>"
    echo
    exit 1
fi

if [ -z "$2" ] ; then
    mgsearch="ctrl/cfg/mg/"
    echo
    echo "No management specifified to connect gateway ${1} "
    echo
    echo "listing configured gateways in keystore:"
    etcdctl ls --sort $mgsearch | cut -d '/' -f 5
    echo
    echo "gw-connect ${1} <management>"
    echo
    exit 1
fi

jobstart "$$"
trap "jobtrace '$$'" 0 1 2 3 6

tag="$1"
gwhost="${tag}"
gwenv="ctrl/cfg/secvpc/${tag}"
mgenv="ctrl/cfg/mg/${mghost}"
username=$(etcdctl get $mgenv/config_system/mgmt_admin_name)
password=$(etcdctl get $mgenv/config_system/mgmt_admin_passwd)
mghost=$(etcdctl get $mgenv/config_system/hostname)
baseurl=https://$mghost/web_api
curl_cmd="curl --silent --insecure -X POST"
region=$(etcdctl get $gwenv/region)
az=$(etcdctl get $gwenv/az)
AMI=$(etcdctl get $gwenv/AMI)
disk=$(etcdctl get $gwenv/disk)
size=$(etcdctl get $gwenv/size)
vpcid=$(etcdctl get $gwenv/vpc)
subid=$(etcdctl get $gwenv/subnetid128)
eth1=$(etcdctl get $gwenv/eth1)
site=$(etcdctl get $gwenv/site)
secgroup=$(etcdctl get $gwenv/secgroup)
hostname=$(etcdctl get $gwenv/config_system/hostname)
host=$(echo "$hostname" | cut -d '.' -f 1)          

ssh -q admin@${hostname} "clish -c 'set interface eth1 state on' -s"
ssh -q admin@${hostname} "clish -c 'set interface eth1 ipv4-address 10.0.${site}.10 mask-length 25' -s"
	msgbus " controller process $ipscmd for $tag gateway ${hostname} done, we are deployed and ready for policy."
    etcdctl set $gwenv/status "deployed"
    #etcdctl set $SKEY/jobs/start/Connect "${tag} ${site}"


SID=`${curl_cmd} -H "Content-Type: application/json" -d @- $baseurl/login <<. | awk -F\" '/sid/ {print $4}'
{
  "user":"$username" ,
  "password":"$password" ,
  "session-name":"$BUDDY $ipscmd ctrl session add $gwhost"
}
.`
# Login complete, add objects, rules and such here.
################################################################################################

sleep 5
msgbus "$ipscmd is session: $SID"

${curl_cmd} -H "Content-Type: application/json" -H "X-chkp-sid: $SID" -d @- $baseurl/add-group <<.
{
  "name" : "IPSControllers",
  "color" : "GREEN"
}
.

sleep 4

${curl_cmd} -H "Content-Type: application/json" -H "X-chkp-sid: $SID" -d "{}" $baseurl/publish
sleep 5

${curl_cmd} -H "Content-Type: application/json" -H "X-chkp-sid: $SID" -d @- $baseurl/add-host <<.
{
  "name" : "${ctrlname}",
  "ipv4-address" : "${ctrlip}",
  "set-if-exists" : true,
  "groups" : "IPSControllers"
}
.

sleep 5

${curl_cmd} -H "Content-Type: application/json" -H "X-chkp-sid: $SID" -d @- $baseurl/set-access-rule <<.
{
  "layer" : "Network",
  "name" : "Cleanup rule",
  "track" : "log"
}
.
 
sleep 5

${curl_cmd} -H "Content-Type: application/json" -H "X-chkp-sid: $SID" -d @- $baseurl/add-access-rule <<.
{
  "layer" : "Network",
  "position" : "top",
  "name" : "ssh Access",
  "source" : "IPSControllers",
  "service" : "ssh_version_2",
  "action" : "Accept",
  "track" : "none",
  "install-on" : "Policy Targets"
}
.


sleep 5

${curl_cmd} -H "Content-Type: application/json" -H "X-chkp-sid: $SID" -d @- $baseurl/add-access-section <<.
{
  "layer" : "Network",
  "position" : "top",
  "name" : "Kill em all"
}
.
 
################################################################################################
# Publish and get out of here
${curl_cmd} -H "Content-Type: application/json" -H "X-chkp-sid: $SID" -d "{}" $baseurl/publish
sleep 5

#Logout
${curl_cmd} -H "Content-Type: application/json" -H "X-chkp-sid: $SID" -d "{}" $baseurl/logout

msgbus "management first configuration setup done. Prep work done, ready for cloud demo. "

